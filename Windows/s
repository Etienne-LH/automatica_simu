import tkinter as tk
from tkinter import ttk
import threading
import time
from PIL import Image, ImageTk

class SimuUi:
    def __init__(self, frame, root, robot=None, motor=None):
        """
        Initialise l'interface utilisateur pour la simulation.

        @param frame: Le cadre dans lequel les widgets seront ajoutés.
        @param root: La fenêtre principale de l'application.
        @param robot: L'objet robot à simuler (optionnel).
        @param motor: L'objet moteur à simuler (optionnel).
        """
        self.frame = frame
        self.root = root
        self.robot = robot
        self.motor = motor
        self.running = False
        self.paused = False
        self.simu_thread = None
        self.mode_rt = tk.BooleanVar(value=True)
        self.speed = 1.0

        # Chemins des images
        self.start_image_path = "Ressources/Start.png"
        self.pause_image_path = "Ressources/Pause.png"
        self.reload_image_path = "Ressources/Refresh.png"

        # Positions des éléments
        self.mode_row = 0
        self.dt_row = 1
        self.start_end_row = 2
        self.speed_row = 3
        self.action_row = 4

        # Initialisation des widgets
        self.create_mode_checkbox()
        self.create_dt_entry()
        self.create_start_end_entries()
        self.create_speed_scale()
        self.create_action_image()
        self.create_reload_button()

        # Masquer les champs de temps de départ et d'arrêt en mode RT
        self.toggle_start_end_entries()

    def create_mode_checkbox(self) -> None:
        """
        Crée la case à cocher pour choisir le mode de simulation.
        """
        self.mode_label = ttk.Label(self.frame, text="Mode RT:")
        self.mode_label.grid(row=self.mode_row, column=0, pady=5)
        self.mode_checkbutton = ttk.Checkbutton(self.frame, text="RT", variable=self.mode_rt, command=self.toggle_start_end_entries)
        self.mode_checkbutton.grid(row=self.mode_row, column=1, pady=5)

    def create_dt_entry(self) -> None:
        """
        Crée un champ de saisie pour la valeur de dt.
        """
        self.dt_label = ttk.Label(self.frame, text="dt (s):")
        self.dt_label.grid(row=self.dt_row, column=0, pady=5)
        self.dt_entry = ttk.Entry(self.frame)
        self.dt_entry.grid(row=self.dt_row, column=1, pady=5)
        self.dt_entry.insert(0, "0.01")  # Valeur par défaut

    def create_start_end_entries(self) -> None:
        """
        Crée des champs de saisie pour les valeurs de départ et de fin en mode non RT.
        """
        self.start_value_label = ttk.Label(self.frame, text="Valeur de départ (s):")
        self.start_value_label.grid(row=self.start_end_row, column=0, pady=5)
        self.start_value_entry = ttk.Entry(self.frame)
        self.start_value_entry.grid(row=self.start_end_row, column=1, pady=5)
        self.start_value_entry.insert(0, "0")  # Valeur par défaut

        self.end_value_label = ttk.Label(self.frame, text="Valeur de fin (s):")
        self.end_value_label.grid(row=self.start_end_row, column=2, pady=5)
        self.end_value_entry = ttk.Entry(self.frame)
        self.end_value_entry.grid(row=self.start_end_row, column=3, pady=5)
        self.end_value_entry.insert(0, "10")  # Valeur par défaut

    def create_speed_scale(self) -> None:
        """
        Crée une jauge pour la vitesse de la simulation.
        """
        self.speed_label = ttk.Label(self.frame, text="Vitesse de la simulation:")
        self.speed_label.grid(row=self.speed_row, column=0, pady=5)
        self.speed_scale = ttk.Scale(self.frame, from_=0.1, to=10, orient=tk.HORIZONTAL, command=self.update_speed)
        self.speed_scale.grid(row=self.speed_row, column=1, pady=5)
        self.speed_scale.set(1)  # Valeur par défaut

    def create_action_image(self) -> None:
        """
        Crée une image cliquable pour démarrer, recharger ou mettre en pause la simulation.
        """
        self.action_image_label = ttk.Label(self.frame)
        self.action_image_label.grid(row=self.action_row, column=0, pady=10)
        self.update_action_image("start")
        self.action_image_label.bind("<Button-1>", self.handle_action_click)

    def create_reload_button(self) -> None:
        """
        Crée un bouton pour recharger la simulation.
        """
        self.reload_image = Image.open(self.reload_image_path)
        self.reload_image = self.reload_image.resize((50, 50), Image.LANCZOS)
        self.reload_image_tk = ImageTk.PhotoImage(self.reload_image)
        self.reload_button = ttk.Button(self.frame, image=self.reload_image_tk, command=self.reload_simulation)
        self.reload_button.grid(row=self.action_row, column=1, pady=10)

    def update_speed(self, value) -> None:
        """
        Met à jour la vitesse de la simulation.

        @param value: La nouvelle valeur de la vitesse.
        """
        self.speed = float(value)

    def handle_action_click(self, event) -> None:
        """
        Gère les clics sur l'image d'action.

        @param event: L'événement de clic.
        """
        if not self.running:
            self.start_simulation()
        elif self.paused:
            self.resume_simulation()
        else:
            self.pause_simulation()

    def start_simulation(self) -> None:
        """
        Démarre la simulation.
        """
        self.running = True
        self.paused = False
        if self.mode_rt.get():
            self.simu_thread = threading.Thread(target=self.run_rt)
        else:
            self.simu_thread = threading.Thread(target=self.run_non_rt)
        self.simu_thread.start()
        self.update_action_image("pause")

    def pause_simulation(self) -> None:
        """
        Met en pause la simulation.
        """
        self.paused = True
        self.update_action_image("start")

    def resume_simulation(self) -> None:
        """
        Reprend la simulation.
        """
        self.paused = False
        self.update_action_image("pause")

    def reload_simulation(self) -> None:
        """
        Recharge la simulation.
        """
        self.stop_simulation()
        self.start_simulation()

    def stop_simulation(self) -> None:
        """
        Arrête la simulation.
        """
        self.running = False
        self.paused = False
        if self.simu_thread:
            self.simu_thread.join(timeout=0.2)
        self.update_action_image("start")

    def update_action_image(self, action: str) -> None:
        """
        Met à jour l'image d'action en fonction de l'action en cours.

        @param action: L'action en cours ("start", "pause").
        """
        if action == "start":
            image_path = self.start_image_path
        elif action == "pause":
            image_path = self.pause_image_path
        else:
            return

        image = Image.open(image_path)
        image = image.resize((50, 50), Image.LANCZOS)
        self.action_image = ImageTk.PhotoImage(image)
        self.action_image_label.config(image=self.action_image)

    def toggle_start_end_entries(self) -> None:
        """
        Affiche ou masque les champs de saisie pour les valeurs de départ et de fin en fonction du mode de simulation.
        """
        if self.mode_rt.get():
            self.start_value_label.grid_forget()
            self.start_value_entry.grid_forget()
            self.end_value_label.grid_forget()
            self.end_value_entry.grid_forget()
        else:
            self.start_value_label.grid(row=self.dt_row, column=2, pady=5)
            self.start_value_entry.grid(row=self.dt_row, column=3, pady=5)
            self.end_value_label.grid(row=self.dt_row, column=4, pady=5)
            self.end_value_entry.grid(row=self.dt_row, column=5, pady=5)

    def run_rt(self) -> None:
        """
        Exécute la simulation en temps réel.
        """
        dt = float(self.dt_entry.get())
        while self.running:
            if not self.paused:
                # Simulation en temps réel
                if self.robot:
                    self.robot.update()
                if self.motor:
                    self.motor.update()
                time.sleep(dt)  # Simuler une boucle de dt secondes

    def run_non_rt(self) -> None:
        """
        Exécute la simulation non temps réel.
        """
        dt = float(self.dt_entry.get())
        start_value = float(self.start_value_entry.get())
        end_value = float(self.end_value_entry.get())
        current_time = start_value
        while self.running and current_time <= end_value:
            if not self.paused:
                # Simulation non temps réel
                if self.robot:
                    self.robot.update()
                if self.motor:
                    self.motor.update()
                current_time += dt * self.speed
                time.sleep(0.01)  # Simuler une boucle de 10 ms

    def updateUi(self) -> None:
        """
        Met à jour l'interface utilisateur.
        """
        pass
